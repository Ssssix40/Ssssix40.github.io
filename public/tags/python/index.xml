<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on spiritshaman</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in python on spiritshaman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <managingEditor>since640@gmail.com (SpiritShaman)</managingEditor>
    <webMaster>since640@gmail.com (SpiritShaman)</webMaster>
    <copyright>© spiritshaman (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 22 Mar 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Numpy学习笔记（一）：numpy random函数</title>
      <link>http://localhost:1313/blog/2018-03-22-numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80numpy-random%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><author>since640@gmail.com (SpiritShaman)</author>
      <guid>http://localhost:1313/blog/2018-03-22-numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80numpy-random%E5%87%BD%E6%95%B0/</guid>
      <description>感谢scipy.org&#xA;在近期的tensorflow学习中，我发现，numpy作为python的数学运算库，学习tensorflow过程中经常需要用到，而numpy的random函数功能很多，每次用的时候都需要另行google，所以我决定将它的常用用法汇总一下。&#xA;0. first of all {% highlight python %} import numpy as numpy {% endhighlight %}&#xA;既然是讲随机数，众所周知，计算机世界的随机数都是伪随机，都有一个叫做种子（seed）的东西&#xA;numpy.random.seed(seed=None)&#xA;可以通过输入int或arrat_like来使得随机的结果固定&#xA;{% highlight python %}&#xA;np.random.rand(3, 3)&#xA;array([[0.43267997, 0.72368429, 0.72366367], [0.28496145, 0.44920635, 0.8924199 ], [0.31974178, 0.55658518, 0.01755763]])&#xA;np.random.rand(3, 3)&#xA;array([[0.75196574, 0.33708946, 0.64345504], [0.85048542, 0.18109553, 0.69524277], [0.06390142, 0.30589554, 0.51643863]])&#xA;np.random.seed(5) np.random.rand(3, 3)&#xA;array([[0.22199317, 0.87073231, 0.20671916], [0.91861091, 0.48841119, 0.61174386], [0.76590786, 0.51841799, 0.2968005 ]])&#xA;np.random.seed(5) np.random.rand(3, 3)&#xA;rray([[0.22199317, 0.87073231, 0.20671916], [0.91861091, 0.48841119, 0.61174386], [0.76590786, 0.</description>
    </item>
    <item>
      <title>MacOS python3虚拟环境的安装和使用</title>
      <link>http://localhost:1313/blog/2018-03-20-macos-python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><author>since640@gmail.com (SpiritShaman)</author>
      <guid>http://localhost:1313/blog/2018-03-20-macos-python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>在使用macos时，因为其本身系统使用python2，所以在使用python3进行开发是会遇到各种奇奇怪怪的问题，这时候就要搬出前人造好的轮子，virtualenv 和 virtualenvwrapper，virtualenv就是python虚拟环境本身，virtualenvwrapper则像是对virtualenv的一种扩展，更方便使用和管理。&#xA;install 安装和配置virtualenv and virtualenvwrapper {% highlight shell %} $ pip install virtualenv virtualenvwrapper {% endhighlight %}&#xA;安装完成之后需要更新~/.bash_profile文件&#xA;{% highlight shell %} $ vim ~/.bash_profile {% endhighlight %}&#xA;添加如下内容&#xA;{% highlight shell %}&#xA;Virtualenv/VirtualenvWrapper source /Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenvwrapper.sh VIRTUALENVWRAPPER_PYTHON=&amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/bin/python3&amp;quot; export VIRTUALENVWRAPPER_PYTHON {% endhighlight %}&#xA;PS：值得注意的是因为python安装目录和小版本号（如3.5，3.6）的不同，其中的路径可能需要自行修改成您实际的路径&#xA;可以通过which python3查询路径&#xA;usage 新建虚拟环境 {% highlight shell %} mkvirtualenv env_name -p python3 &amp;ndash;system-site-packages {% endhighlight %}&#xA;PS:如非需要，此处不建议添加--system-site-packages，改参数后文有介绍&#xA;其他使用指令 {% highlight text %}&#xA;workon:列出虚拟环境列表&#xA;lsvirtualenv:同上&#xA;workon [envname]:切换虚拟环境</description>
    </item>
    <item>
      <title>MacOS python3 import tensorflow1.6.0报错Illegal instruction:4</title>
      <link>http://localhost:1313/blog/2018-03-19-import-tensorflow%E6%8A%A5%E9%94%99/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate><author>since640@gmail.com (SpiritShaman)</author>
      <guid>http://localhost:1313/blog/2018-03-19-import-tensorflow%E6%8A%A5%E9%94%99/</guid>
      <description>在我使用pip3 install --upgrade tensorflow命令将tensorflow升级到1.6.0后，出现了Illegal instruction:4的报错，在反复卸载安装，安装python虚拟环境无果后，发现是tensorflow 1.6.0版本问题，虽然不明白问题所在，但是版本回退后可以解决此问题。&#xA;{% highlight shell %} $ pip3 uninstall tensorflow $ pip3 install -Iv tensorflow==1.5 {% endhighlight %}&#xA;谢谢您的阅读🙏</description>
    </item>
    <item>
      <title>python占位符(转)</title>
      <link>http://localhost:1313/blog/2018-03-06-python%E5%8D%A0%E4%BD%8D%E7%AC%A6/</link>
      <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate><author>since640@gmail.com (SpiritShaman)</author>
      <guid>http://localhost:1313/blog/2018-03-06-python%E5%8D%A0%E4%BD%8D%E7%AC%A6/</guid>
      <description>from 博客园allenczq&#xA;1. 百分号方式 %[(name)][flags][width].[precision]typecode (name) 可选，用于选择指定的key&#xA;flags 可选，可供选择的值有:&#xA;+ 右对齐；正数前加正好，负数前加负号；&#xA;- 左对齐；正数前无符号，负数前加负号；&#xA;空格 右对齐；正数前加空格，负数前加负号；&#xA;0 右对齐；正数前无符号，负数前加负号；用0填充空白处&#xA;width 可选，占有宽度&#xA;.precision 可选，小数点后保留的位数&#xA;typecode 必选&#xA;s，获取传入对象的__str__方法的返回值，并将其格式化到指定位置&#xA;r，获取传入对象的__repr__方法的返回值，并将其格式化到指定位置&#xA;c，整数：将数字转换成其unicode对应的值，10进制范围为 0 &amp;lt;= i &amp;lt;= 1114111（py27则只支持0-255）；字符：将字符添加到指定位置&#xA;o，将整数转换成 八 进制表示，并将其格式化到指定位置&#xA;x，将整数转换成十六进制表示，并将其格式化到指定位置&#xA;d，将整数、浮点数转换成 十 进制表示，并将其格式化到指定位置&#xA;e，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（小写e）&#xA;E，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（大写E）&#xA;f， 将整数、浮点数转换成浮点数表示，并将其格式化到指定位置（默认保留小数点后6位）&#xA;F，同上&#xA;g，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是e；）&#xA;G，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是E；）&#xA;%，当字符串中存在格式化标志时，需要用 %%表示一个百分号&#xA;注：Python中百分号格式化是不存在自动将整数转换成二进制表示的方式&#xA;常用格式化：&#xA;tpl = &amp;#34;i am %s&amp;#34; % &amp;#34;alex&amp;#34; tpl = &amp;#34;i am %s age %d&amp;#34; % (&amp;#34;alex&amp;#34;, 18) tpl = &amp;#34;i am %(name)s age %(age)d&amp;#34; % {&amp;#34;name&amp;#34;: &amp;#34;alex&amp;#34;, &amp;#34;age&amp;#34;: 18} tpl = &amp;#34;percent %.</description>
    </item>
  </channel>
</rss>
